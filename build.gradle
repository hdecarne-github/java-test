// Plugins
plugins {
	id "java-library"
	id "jacoco"
	id "maven-publish"
	id "signing"
	id "eclipse"
	id "de.carne.java-tools" version "1.2.0"
	id "org.sonarqube" version "3.3"
	id "org.owasp.dependencycheck" version "6.5.0.1"
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")
def releaseBuild = !snapshotBuild

def mavenPublicRepository = "https://s01.oss.sonatype.org/content/groups/public/"
def mavenReleaseRepository = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def mavenSnapshotRepository = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

def resolveProperty(propertyName, envName, defValue = "<undefined>") {
	return ((project.findProperty(propertyName) ?: System.getenv(envName)) ?: defValue);
}

// Project
defaultTasks "classes", "testClasses", "javadoc"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
	// Caused by org.eclipse.jdt.annotation
	options.compilerArgs += ["-Xlint:-requires-transitive-automatic"]
}

plugins.withType(JavaPlugin).configureEach {
	java {
		modularity.inferModulePath = true
		registerFeature('mockito') {
			usingSourceSet(sourceSets.main)
		}	
	}
}

repositories {
	mavenCentral()
	maven { url mavenPublicRepository }
	if(snapshotBuild) {
		maven { url mavenSnapshotRepository }
	}
	mavenLocal()
}

dependencies {
	api(group: "org.junit.jupiter", name: "junit-jupiter-api", version: project.junit5Version)
	implementation(group: "de.carne", name: "java-default", version: project.javaDefaultVersion)
	mockitoImplementation(group: "org.mockito", name: "mockito-junit-jupiter", version: project.mockitoVersion)
	mockitoImplementation(group: "org.mockito", name: "mockito-inline", version: project.mockitoVersion)
	runtimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: project.junit5Version)
}

jar {
	manifest {
		attributes(
			'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
			'Build-Jdk' : System.properties['java.version'],
			'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
			'X-Compile-Target-JDK': targetCompatibility,
			'X-Compile-Source-JDK': sourceCompatibility,
			'X-Module-Id': project.name,
			'X-Module-Name': project.name,
			'X-Module-Version': project.version,
			'X-Module-DocURL': projectUrl,
			'X-Module-License': projectLicenseUrl
		)
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "started", "failed", "passed", "skipped"
		exceptionFormat "full"
	}
}

jacoco {
	toolVersion = project.jacocoVersion
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
	}
}
test.finalizedBy jacocoTestReport

sonarqube {
	properties {
		property 'sonar.coverage.jacoco.xmlReportPaths', jacocoTestReport.reports.xml.destination
	}
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	repositories {
		maven {
			url = (releaseBuild ? mavenReleaseRepository : mavenSnapshotRepository)
			credentials {
				username = project.resolveProperty("ossrhUsername", "OSSRH_USERNAME")
				password = project.resolveProperty("ossrhPassword", "OSSRH_PASSWORD")
			}
		}
	}
	publications {
		javaArtifacts(MavenPublication) {
			from components.java
			suppressPomMetadataWarningsFor('mockitoApiElements');
			suppressPomMetadataWarningsFor('mockitoRuntimeElements');
			pom {
				name = project.name
				description = projectDescription
				url = projectUrl
				licenses {
					license {
						name = projectLicense
						url = projectLicenseUrl
						distribution = "repo"
					}
				}
				developers {
					developer {
						id = project.resolveProperty("developerId", "DEVELOPER_ID")
						name = project.resolveProperty("developerName", "DEVELOPER_NAME")
						email = project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
					}
				}
				scm {
					url = projectScmUrl
				}
			}
		}
	}
}

signing {
	sign publishing.publications.javaArtifacts
}

tasks.withType(Sign) {
	onlyIf { releaseBuild }
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged {
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					}
				}
			}
		}
	}
}
